# 智能制造存储中心系统

## 项目背景

在智能制造环境中，高效的物料管理是保障生产流程顺畅运行的关键因素。智能制造存储中心系统旨在提供一个现代化、智能化的解决方案，用于管理制造过程中的原料、半成品和成品的存储，实现物料的可视化管理和智能化调度。

本系统基于JavaEE技术栈开发，采用Spring Boot框架，结合MySQL数据库和MyBatis持久层框架，前端使用Thymeleaf模板引擎，实现了前后端分离的架构设计。系统具有良好的可扩展性和可维护性，能够满足智能制造环境下物料存储管理的需求。

## 功能特性

### 1. 物品管理

- **增加物品**：支持添加新物品，包括原料、半成品和成品
- **删除物品**：支持删除不再需要的物品记录
- **修改物品**：支持修改物品的各项属性信息
- **查询物品**：支持多维度查询物品信息

### 2. 智能存储区域管理

- **自动判断存储区域**：根据物品类型（原料、半成品、成品）自动判断适合的存储区域
- **区域查询**：支持按存储区域（原料区、半成品区、成品区）查询物品
- **位置管理**：记录物品的具体存储位置，便于查找和管理

### 3. 多维度查询

- **类型查询**：按物品类型（原料、半成品、成品）查询
- **区域查询**：按存储区域（原料区、半成品区、成品区）查询
- **名称查询**：支持物品名称的模糊查询
- **编码查询**：支持物品编码的精确查询

### 4. 双重接口

- **Web界面**：提供直观的Web操作界面，支持所有功能的可视化操作
- **RESTful API**：提供标准的RESTful API接口，便于与其他系统集成

### 5. 现代化交互界面

- **响应式设计**：适配不同尺寸的设备屏幕，提供一致的用户体验
- **中心化布局**：表格、搜索栏等内容居中显示，优化视觉效果
- **动态通知系统**：操作反馈及时，增强用户体验
- **交互式确认对话框**：关键操作二次确认，避免误操作
- **数据排序功能**：支持按数量、时间等多维度排序
- **美化操作按钮**：视觉标识清晰，提高操作效率
- **弹窗式详情查看**：替代展开行，提供更清晰的信息展示
- **优化的筛选体验**：筛选按钮样式优化，交互更加友好

## 技术架构

### 后端技术栈

- **框架**：Spring Boot 2.7.5
- **数据库**：MySQL 5.7+
- **ORM框架**：MyBatis
- **构建工具**：Maven

### 前端技术栈

- **模板引擎**：Thymeleaf
- **UI框架**：Bootstrap 5
- **JavaScript库**：jQuery
- **图标库**：Font Awesome
- **动画效果**：Animate.css
- **自定义样式**：CSS3 (styles.css)
- **交互脚本**：原生JavaScript (scripts.js, main.js, confirm-dialog.js)
- **响应式设计**：媒体查询

### 系统架构

系统采用经典的三层架构：

1. **表示层（Controller）**
   - 处理用户请求和响应
   - 实现Web页面控制和RESTful API

2. **业务逻辑层（Service）**
   - 实现核心业务逻辑
   - 处理数据验证和转换
   - 实现存储区域自动判断算法

3. **数据访问层（Mapper）**
   - 实现与数据库的交互
   - 执行SQL查询和更新操作

## 数据模型

系统的核心数据模型是物品（Item），包含以下主要属性：

- **基本信息**：ID、名称、编码、规格、数量、单位
- **分类信息**：物品类型（原料、半成品、成品）
- **存储信息**：存储区域、存储位置、入库时间
- **管理信息**：创建时间、更新时间、备注

## 前端设计与优化

### 视觉设计

- **现代化UI**：采用简洁、扁平化的设计风格，提升专业感
- **一致的色彩方案**：使用协调的配色，增强视觉识别性
- **自定义徽章样式**：区分不同的物品类型和存储区域
- **表格样式优化**：行间隔色、悬停效果，提升可读性
- **自定义滚动条**：美化滚动条样式，改善浏览体验

### 交互优化

- **搜索功能强化**：放大搜索栏，增强可见性和易用性
- **操作按钮美化**：添加物品按钮优化为天蓝色，增强视觉引导
- **表格操作优化**：移除不必要的ID列，简化表格内容
- **详情查看改进**：从展开行式改为弹窗式，提高信息密度
- **交互反馈**：操作后即时反馈，增强用户体验
- **筛选按钮优化**：修复点击后文字可见性问题，改为加粗样式

### 性能优化

- **动画效果**：添加适当的过渡动画，增强用户体验
- **延迟加载**：优化资源加载顺序，提高页面加载速度
- **响应式布局**：针对不同设备进行布局优化，提供一致体验

## 部署指南

### 环境要求

- JDK 1.8+
- Maven 3.6+
- MySQL 5.7+
- 现代浏览器（Chrome、Firefox、Edge等）

### 部署步骤

1. **准备数据库**
   ```sql
   CREATE DATABASE storage_center DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
   ```

2. **配置应用**
   编辑`application.properties`文件，设置数据库连接信息

3. **初始化数据**
   执行`schema.sql`和`data.sql`脚本

4. **构建应用**
   ```bash
   mvn clean package
   ```

5. **运行应用**
   ```bash
   java -jar target/storage-center-0.0.1-SNAPSHOT.jar
   ```

6. **访问系统**
   打开浏览器，访问 http://localhost:8080/items/list

## 扩展与优化方向

1. **用户认证与权限管理**：添加用户登录和权限控制功能
2. **库存预警**：实现库存不足自动预警功能
3. **数据统计与分析**：添加数据可视化和分析功能
4. **条码/二维码支持**：集成条码或二维码扫描功能
5. **移动端适配**：开发移动端应用或优化移动端访问体验
6. **批量操作**：支持物品的批量导入、导出和操作
7. **工作流集成**：与生产工作流系统集成，实现自动化管理
8. **深色模式**：增加深色模式支持，减轻夜间使用时的视觉疲劳
9. **更多主题选择**：允许用户根据偏好选择不同界面主题

## 贡献指南

欢迎对本项目提出改进建议或直接贡献代码。贡献步骤：

1. Fork本仓库
2. 创建您的特性分支 (`git checkout -b feature/AmazingFeature`)
3. 提交您的更改 (`git commit -m 'Add some AmazingFeature'`)
4. 推送到分支 (`git push origin feature/AmazingFeature`)
5. 打开一个Pull Request

## 许可证

本项目采用MIT许可证。详情请参阅LICENSE文件。

## 联系方式

如有问题或建议，请联系项目维护团队。

---

© 2023-2024 智能制造存储中心系统团队。保留所有权利。